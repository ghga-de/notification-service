{
  "$defs": {
    "SmtpAuthConfig": {
      "description": "Model to encapsulate SMTP authentication details.",
      "properties": {
        "username": {
          "description": "The login username or email",
          "title": "Username",
          "type": "string"
        },
        "password": {
          "description": "The login password",
          "format": "password",
          "title": "Password",
          "type": "string",
          "writeOnly": true
        }
      },
      "required": [
        "username",
        "password"
      ],
      "title": "SmtpAuthConfig",
      "type": "object"
    }
  },
  "additionalProperties": false,
  "description": "Modifies the original Settings class provided by the user",
  "properties": {
    "mongo_dsn": {
      "description": "MongoDB connection string. Might include credentials. For more information see: https://naiveskill.com/mongodb-connection-string/",
      "examples": [
        "mongodb://localhost:27017"
      ],
      "format": "multi-host-uri",
      "minLength": 1,
      "title": "Mongo Dsn",
      "type": "string"
    },
    "db_name": {
      "description": "Name of the database located on the MongoDB server.",
      "examples": [
        "my-database"
      ],
      "title": "Db Name",
      "type": "string"
    },
    "mongo_timeout": {
      "anyOf": [
        {
          "exclusiveMinimum": 0,
          "type": "integer"
        },
        {
          "type": "null"
        }
      ],
      "default": null,
      "description": "Timeout in seconds for API calls to MongoDB. The timeout applies to all steps needed to complete the operation, including server selection, connection checkout, serialization, and server-side execution. When the timeout expires, PyMongo raises a timeout exception. If set to None, the operation will not time out (default MongoDB behavior).",
      "examples": [
        300,
        600,
        null
      ],
      "title": "Mongo Timeout"
    },
    "log_level": {
      "default": "INFO",
      "description": "The minimum log level to capture.",
      "enum": [
        "CRITICAL",
        "ERROR",
        "WARNING",
        "INFO",
        "DEBUG",
        "TRACE"
      ],
      "title": "Log Level",
      "type": "string"
    },
    "service_name": {
      "default": "ns",
      "title": "Service Name",
      "type": "string"
    },
    "service_instance_id": {
      "description": "A string that uniquely identifies this instance across all instances of this service. A globally unique Kafka client ID will be created by concatenating the service_name and the service_instance_id.",
      "examples": [
        "germany-bw-instance-001"
      ],
      "title": "Service Instance Id",
      "type": "string"
    },
    "log_format": {
      "anyOf": [
        {
          "type": "string"
        },
        {
          "type": "null"
        }
      ],
      "default": null,
      "description": "If set, will replace JSON formatting with the specified string format. If not set, has no effect. In addition to the standard attributes, the following can also be specified: timestamp, service, instance, level, correlation_id, and details",
      "examples": [
        "%(timestamp)s - %(service)s - %(level)s - %(message)s",
        "%(asctime)s - Severity: %(levelno)s - %(msg)s"
      ],
      "title": "Log Format"
    },
    "log_traceback": {
      "default": true,
      "description": "Whether to include exception tracebacks in log messages.",
      "title": "Log Traceback",
      "type": "boolean"
    },
    "plaintext_email_template": {
      "description": "The plaintext template to use for email notifications",
      "title": "Plaintext Email Template",
      "type": "string"
    },
    "html_email_template": {
      "description": "The HTML template to use for email notifications",
      "title": "Html Email Template",
      "type": "string"
    },
    "from_address": {
      "description": "The sender's address.",
      "format": "email",
      "title": "From Address",
      "type": "string"
    },
    "smtp_host": {
      "description": "The mail server host to connect to",
      "title": "Smtp Host",
      "type": "string"
    },
    "smtp_port": {
      "description": "The port for the mail server connection",
      "title": "Smtp Port",
      "type": "integer"
    },
    "smtp_auth": {
      "anyOf": [
        {
          "$ref": "#/$defs/SmtpAuthConfig"
        },
        {
          "type": "null"
        }
      ],
      "default": null,
      "description": ""
    },
    "use_starttls": {
      "default": true,
      "description": "Boolean flag indicating the use of STARTTLS",
      "title": "Use Starttls",
      "type": "boolean"
    },
    "smtp_timeout": {
      "anyOf": [
        {
          "exclusiveMinimum": 0.0,
          "type": "number"
        },
        {
          "type": "null"
        }
      ],
      "default": 60,
      "description": "The maximum amount of time (in seconds) to wait for a connection to the SMTP server. If set to `None`, the operation will wait indefinitely.",
      "title": "Smtp Timeout"
    },
    "notification_topic": {
      "description": "Name of the event topic used to track notification events",
      "examples": [
        "notifications"
      ],
      "title": "Notification Topic",
      "type": "string"
    },
    "notification_type": {
      "description": "The type to use for events containing content to be sent",
      "examples": [
        "notification"
      ],
      "title": "Notification Type",
      "type": "string"
    },
    "kafka_servers": {
      "description": "A list of connection strings to connect to Kafka bootstrap servers.",
      "examples": [
        [
          "localhost:9092"
        ]
      ],
      "items": {
        "type": "string"
      },
      "title": "Kafka Servers",
      "type": "array"
    },
    "kafka_security_protocol": {
      "default": "PLAINTEXT",
      "description": "Protocol used to communicate with brokers. Valid values are: PLAINTEXT, SSL.",
      "enum": [
        "PLAINTEXT",
        "SSL"
      ],
      "title": "Kafka Security Protocol",
      "type": "string"
    },
    "kafka_ssl_cafile": {
      "default": "",
      "description": "Certificate Authority file path containing certificates used to sign broker certificates. If a CA is not specified, the default system CA will be used if found by OpenSSL.",
      "title": "Kafka Ssl Cafile",
      "type": "string"
    },
    "kafka_ssl_certfile": {
      "default": "",
      "description": "Optional filename of client certificate, as well as any CA certificates needed to establish the certificate's authenticity.",
      "title": "Kafka Ssl Certfile",
      "type": "string"
    },
    "kafka_ssl_keyfile": {
      "default": "",
      "description": "Optional filename containing the client private key.",
      "title": "Kafka Ssl Keyfile",
      "type": "string"
    },
    "kafka_ssl_password": {
      "default": "",
      "description": "Optional password to be used for the client private key.",
      "format": "password",
      "title": "Kafka Ssl Password",
      "type": "string",
      "writeOnly": true
    },
    "generate_correlation_id": {
      "default": true,
      "description": "A flag, which, if False, will result in an error when trying to publish an event without a valid correlation ID set for the context. If True, the a newly correlation ID will be generated and used in the event header.",
      "examples": [
        true,
        false
      ],
      "title": "Generate Correlation Id",
      "type": "boolean"
    },
    "kafka_max_message_size": {
      "default": 1048576,
      "description": "The largest message size that can be transmitted, in bytes. Only services that have a need to send/receive larger messages should set this.",
      "examples": [
        1048576,
        16777216
      ],
      "exclusiveMinimum": 0,
      "title": "Kafka Max Message Size",
      "type": "integer"
    },
    "kafka_max_retries": {
      "default": 0,
      "description": "The maximum number of times to immediately retry consuming an event upon failure. Works independently of the dead letter queue.",
      "examples": [
        0,
        1,
        2,
        3,
        5
      ],
      "minimum": 0,
      "title": "Kafka Max Retries",
      "type": "integer"
    },
    "kafka_enable_dlq": {
      "default": false,
      "description": "A flag to toggle the dead letter queue. If set to False, the service will crash upon exhausting retries instead of publishing events to the DLQ. If set to True, the service will publish events to the DLQ topic after exhausting all retries",
      "examples": [
        true,
        false
      ],
      "title": "Kafka Enable DLQ",
      "type": "boolean"
    },
    "kafka_dlq_topic": {
      "default": "dlq",
      "description": "The name of the topic used to resolve error-causing events.",
      "examples": [
        "dlq"
      ],
      "title": "Kafka DLQ Topic",
      "type": "string"
    },
    "kafka_retry_backoff": {
      "default": 0,
      "description": "The number of seconds to wait before retrying a failed event. The backoff time is doubled for each retry attempt.",
      "examples": [
        0,
        1,
        2,
        3,
        5
      ],
      "minimum": 0,
      "title": "Kafka Retry Backoff",
      "type": "integer"
    }
  },
  "required": [
    "mongo_dsn",
    "db_name",
    "service_instance_id",
    "plaintext_email_template",
    "html_email_template",
    "from_address",
    "smtp_host",
    "smtp_port",
    "notification_topic",
    "notification_type",
    "kafka_servers"
  ],
  "title": "ModSettings",
  "type": "object"
}